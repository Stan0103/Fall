{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "Week 4-1 Python Condition and Loop-colab.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Stan0103/Fall/blob/master/APCS%E8%A7%80%E5%BF%B5%E9%A1%8C%E8%A7%A3%E6%9E%90-%E5%8A%9F%E8%AA%B2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Eeqj8QUBZXuF",
        "outputId": "42272df3-b600-4af2-c44e-07871c2156b4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "a = []\n",
        "b = []\n",
        "\n",
        "\n",
        "a.append(0)\n",
        "b.append(0)\n",
        "\n",
        "\n",
        "for i in range(1, 101):\n",
        "  b.append(i)\n",
        "  \n",
        "\n",
        "for j in range(1, 100):\n",
        "  a.append(b[j]+ a[j-1])\n",
        "\n",
        "a[1]-a[3]"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zxCs_uwYZXuz",
        "outputId": "3f754406-7a2e-4128-e4c7-7674d240da82",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "list(range(0, 11, 2))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 2, 4, 6, 8, 10]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gSidI106ZXu2"
      },
      "source": [
        "### 【任務4-7】巢狀迴圈：用程式印九九乘法表\n",
        "\n",
        "`for` 和 `while` 迴圈可以是巢狀的，也就是迴圈裡面有迴圈。經典範例：用巢狀迴圈計算並印出九九乘法表。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e3nby-nmZXu2",
        "outputId": "19409a4b-714c-4446-f039-bb0eabe8f9e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "# 請在下一行開始輸入你的程式碼\n",
        "for i in range(1, 10):        # 外迴圈：1到9\n",
        "    for j in range (1, 10):   # 內迴圈：1到9\n",
        "        '''\n",
        "        為了讓數字對齊，'{:2d}'讓印出時每個數字都是兩位數，不足兩位數的話則補空白。\n",
        "        end=' ' 的意思是印完不換行，但在每個數字後加一個空格隔開\n",
        "        '''\n",
        "        print('{:2d}'.format(i * j), end=' ')   \n",
        "\n",
        "    print()                   # 在每一橫行輸出後換行用"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " 1  2  3  4  5  6  7  8  9 \n",
            " 2  4  6  8 10 12 14 16 18 \n",
            " 3  6  9 12 15 18 21 24 27 \n",
            " 4  8 12 16 20 24 28 32 36 \n",
            " 5 10 15 20 25 30 35 40 45 \n",
            " 6 12 18 24 30 36 42 48 54 \n",
            " 7 14 21 28 35 42 49 56 63 \n",
            " 8 16 24 32 40 48 56 64 72 \n",
            " 9 18 27 36 45 54 63 72 81 \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_2steXRKZXu4"
      },
      "source": [
        "### 【挑戰】傳入不定數量的參數來呼叫函式\n",
        "\n",
        "計算每立方公分汙染物的顆數\n",
        "\n",
        "控制汙染已經成為全球共同面對的課題，科學家用電腦分析歷年的細懸浮微粒中汙染物質的資料，針對某個城市建立了一個汙染物質數量的模型：已知 1980 年時細懸浮微粒中汙染物質為 14000 (顆／立方公分)，1980 年後經過 t 年每立方公分汙染物的顆數為 P，其中\n",
        "\n",
        "$\\Large P＝1000t^{1.25} ＋14000$\n",
        "\n",
        "利用這個模型來計算2000年、2010年、2020年時每立方公分汙染物的顆數各為多少？\n",
        "\n",
        "需求：\n",
        "- 呼叫函式傳多個年份參數，將所有年份的汙染物顆數加入到List中。\n",
        "- List做為函式的回傳值，並印出回傳結果。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x-8zj9QxZXu5"
      },
      "source": [
        "# 請在下一行開始輸入你的程式碼\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sNfgBrMtZXu-"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}